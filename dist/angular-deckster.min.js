!function(e){e.module("angularDeckster.config",[]),e.module("angularDeckster.templates",[]),e.module("angularDeckster.directives",["angularDeckster.config","angularDeckster.controllers"]),e.module("angularDeckster.filters",[]),e.module("angularDeckster.services",[]),e.module("angularDeckster.controllers",["angularDeckster.services"]);var t=e.module("angularDeckster",["angularDeckster.templates","angularDeckster.directives","angularDeckster.filters","angularDeckster.services","angularDeckster.controllers","angularDeckster.config","gridster","ngRoute"]);t.config(["$routeProvider",function(e){e.when("/deckster/card/:cardId",{templateUrl:"/deckster-popout/popout.html"})}]),e.module("angularDeckster.config").provider("decksterConfig",function(){var t={basePath:"/deckster",popoutTemplates:{}};return{set:function(r){e.extend(t,r)},$get:function(){return t}}})}(angular),angular.module("angularDeckster.controllers").controller("decksterCardCtrl",["$scope","$compile","$window","decksterConfig",function(e,t,r,a){var n=null,c=!1,d=!1,o=this,l={},i=[];e.expanded=!1,e.loading=!1,e.currentView="summary",e.toggleView=function(){e.currentView="summary"===e.currentView?"details":"summary",o.loadContent(e.currentView)},e.expandCard=function(){e.expanded?o.collapseCard():o.expandCard()},e.reloadCard=function(){o.reloadCard()},e.popoutCard=function(){},e.currentDate=function(){return Date.now()},e.hasPopout=function(){return o.hasPopout()},e.$on("deckster.cards.refresh",function(){o.reloadCard()}),o.setCard=function(e){n=e,o.loadCard()},o.loadCard=function(){o.loadCardSummary(),e.card.isLazy()||o.loadCardDetails()},o.loadCardSummary=function(){e.loading=!0,e.card.getSummaryContent(function(r){var a=n.find(".deckster-summary");a.html(r),t(a.contents())(e),e.loading=!1,c=!0})},o.loadCardDetails=function(){e.loading=!0,e.card.getDetailContent(function(r){var a=n.find(".deckster-detail");a.html(r),t(a.contents())(e),e.loading=!1,d=!0})},o.loadContent=function(e){"summary"!==e||c?d||o.loadCardDetails():o.loadCardSummary()},o.expandCard=function(){var t=angular.element(r),a=Math.floor(t.height()/e.gridsterConfig.curRowHeight);l=angular.copy(e.card.size),i=angular.copy(e.card.position),e.card.size={x:e.gridsterConfig.columns,y:a},e.card.position=[0,0],e.expanded=!0},o.collapseCard=function(){e.card.size=l,e.card.position=i,e.expanded=!1},o.hasPopout=function(){return angular.isDefined(a.cardDefaults[e.card.id]&&a.cardDefaults[e.card.id].detailTemplateUrl)},o.reloadCard=function(){o.loadCard()}}]),angular.module("angularDeckster.controllers").controller("decksterDeckCtrl",["$scope","Card",function(e,t){e.cardList=[],e.cardConfigMap={sizeX:"card.size.x",sizeY:"card.size.y",row:"card.position[0]",col:"card.position[1]",minSizeY:"card.minSizeY",maxSizeY:"card.maxSizeY"},this.initCards=function(r){e.cardList=(r||[]).map(function(e){return new t(e)})}}]),angular.module("angularDeckster.controllers").controller("decksterPopoutCtrl",["decksterConfig",function(e){this.getTemplateUrl=function(t){return e.cardDefaults[t].detailTemplateUrl}}]),angular.module("angularDeckster.directives").directive("decksterCard",function(){return{restrict:"EA",replace:!0,require:["^gridster","decksterCard"],controller:"decksterCardCtrl",templateUrl:"/deckster-card/card.html",scope:{card:"=cardItem"},link:function(e,t,r,a){var n=a[1];e.gridsterConfig=a[0],n.setCard(t),e.$on("deckster.deck.reload."+e.card.deckId,function(){n.reloadCard()})}}}),angular.module("angularDeckster.directives").directive("decksterDeck",["$rootScope","$parse",function(e,t){var r={gridsterOpts:{columns:5,margins:[10,10],rowHeight:150,draggable:{handle:".deckster-card-header"}}};return{replace:!0,scope:!0,templateUrl:"/deckster-deck/deck.html",controller:"decksterDeckCtrl",link:function(e,a,n,c){e.deckOptions=angular.extend({},r,t(n.deckOptions||{})(e)),n.$observe("deckCards",function(r){var a=t(r||[])(e);c.initCards(a)})}}}]),angular.module("angularDeckster.directives").directive("decksterPopout",["$routeParams","$compile","Card",function(e,t,r){return{replace:!0,controller:"decksterPopoutCtrl",template:'<div class="deckster-popout-content"></div>',link:function(a,n,c,d){var o=e.cardId;if(o){var l=d.getTemplateUrl(o),i=new r({popoutTemplateUrl:l});i.getPopoutContent(function(e){n.html(e),t(n.contents())(a)})}}}}]),angular.module("angularDeckster.services").factory("Card",["$http","$templateCache","$q",function(e,t,r){var a={lazyLoad:!0,summaryTemplateUrl:"/deckster-card/default-summary.html",detailTemplateUrl:"/deckster-card/default-detail.html",popoutTemplateUrl:"/deckster-card/default-detail.html"},n={},c=function(e){this.updateCardConfig(e)};c.prototype.updateCardConfig=function(e){angular.extend(this,a,e)},c.prototype.getSummaryContent=function(e){d(this.summaryTemplateUrl).then(function(t){e&&e(t)})},c.prototype.getDetailContent=function(e){d(this.detailTemplateUrl).then(function(t){e&&e(t)})},c.prototype.getPopoutContent=function(e){d(this.popoutTemplateUrl).then(function(t){e&&e(t)})},c.prototype.isLazy=function(){return this.lazyLoad},c.prototype.getTitle=function(){return this.title||this.id||""},c.prototype.getPopoutUrl=function(){return"#/deckster/card/"+this.id};var d=function(a){return n[a]?n[a]:n[a]=r.when(t.get(a)||e.get(a)).then(function(e){return angular.isObject(e)?(t.put(a,e.data),e.data):e})};return c}]),angular.module("angularDeckster.services").factory("decksterService",["decksterConfig","$rootScope",function(e,t){return{buildCards:function(t,r){angular.forEach(e.decks[t].cards,function(a){a.deckId=t,r.push(angular.extend({},e.cardDefaults[a.id],a))})},reloadDeck:function(e){t.$broadcast("deckster.deck.reload."+e)}}}]),function(e){try{e=angular.module("angularDeckster.templates")}catch(t){e=angular.module("angularDeckster.templates",[])}e.run(["$templateCache",function(e){e.put("/deckster-card/card.html",'<div class="deckster-card-inner"><div class="deckster-card-header"><div class="deckster-card-title">{{card.getTitle()}}</div><div class="deckster-card-controls"><span class="deckster-card-control glyphicon glyphicon-refresh" ng-click="reloadCard()"></span> <span class="deckster-card-control glyphicon" ng-class="{\'glyphicon-resize-full\': !expanded, \'glyphicon-resize-small\': expanded}" ng-click="expandCard(); toggleView()"></span> <a target="_blank" class="deckster-card-control thin glyphicon glyphicon-new-window" ng-href="{{card.getPopoutUrl()}}" ng-if="hasPopout()"></a></div></div><div class="deckster-content"><div class="deckster-summary" ng-show="currentView === \'summary\'"></div><div class="deckster-detail" ng-show="currentView === \'details\'"></div></div></div>')}])}(),function(e){try{e=angular.module("angularDeckster.templates")}catch(t){e=angular.module("angularDeckster.templates",[])}e.run(["$templateCache",function(e){e.put("/deckster-card/default-detail.html","<div>This is the detail view of your deckster card. To add your own content set the detailTemplateUrl option in the card options.</div>")}])}(),function(e){try{e=angular.module("angularDeckster.templates")}catch(t){e=angular.module("angularDeckster.templates",[])}e.run(["$templateCache",function(e){e.put("/deckster-card/default-summary.html","<div>This is the summary view of your deckster card. To add your own content set the summaryTemplateUrl option in the card options.</div>")}])}(),function(e){try{e=angular.module("angularDeckster.templates")}catch(t){e=angular.module("angularDeckster.templates",[])}e.run(["$templateCache",function(e){e.put("/deckster-deck/deck.html",'<div class="deckster-deck"><div class="deckster-deck-content" gridster="deckOptions.gridsterOpts"><div class="deckster-card" gridster-item="cardConfigMap" ng-repeat="card in cardList"><deckster-card card-item="card"></deckster-card></div></div></div>')}])}(),function(e){try{e=angular.module("angularDeckster.templates")}catch(t){e=angular.module("angularDeckster.templates",[])}e.run(["$templateCache",function(e){e.put("/deckster-popout/popout.html",'<div class="deckster-popout-wrapper"><deckster-popout></deckster-popout></div>')}])}();